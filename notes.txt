        <!-- Login Form -->
        <div class="login-container">
            <input type="text" placeholder="Username" bind:value="{username}" />
            <input type="password" placeholder="Password" bind:value="{password}" />
            <button on:click="{login}">Login</button>
            <p>{loginMessage}</p>
        </div>


        const fetchProtectedData = async () => {
    const token = localStorage.getItem('token');

    const response = await fetch('http://localhost:3000/api/protected', {
        headers: {
            Authorization: `Bearer ${token}`, // Add the token to the request
        },
    });

    if (response.ok) {
        const data = await response.json();
        console.log('Protected data:', data);
    } else {
        console.error('Failed to fetch protected data');
    }
};


const handleLogout = () => {
    localStorage.removeItem('token');
    console.log('Logged out');
};







REFRESH TOJEN 

const refreshToken = async () => {
    const storedRefreshToken = localStorage.getItem('refreshToken');

    const response = await fetch('http://localhost:3000/auth/refresh', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ refreshToken: storedRefreshToken }),
    });

    const data = await response.json();

    if (response.ok) {
        localStorage.setItem('accessToken', data.accessToken);
        return data.accessToken;
    } else {
        console.error('Failed to refresh token', data.error);
        // Handle refresh failure (e.g., logout the user)
    }
};

const fetchWithAuth = async (url, options = {}) => {
    let token = localStorage.getItem('accessToken');

    const response = await fetch(url, {
        ...options,
        headers: {
            ...options.headers,
            Authorization: `Bearer ${token}`,
        },
    });

    if (response.status === 401) {
        // Access token expired, try to refresh it
        token = await refreshToken();

        if (token) {
            // Retry the request with the new token
            return fetch(url, {
                ...options,
                headers: {
                    ...options.headers,
                    Authorization: `Bearer ${token}`,
                },
            });
        }
    }

    return response;
};


const handleLogin = async (email, password) => {
    const response = await fetch('http://localhost:3000/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
    });

    const data = await response.json();

    if (response.ok) {
        localStorage.setItem('accessToken', data.accessToken);
        localStorage.setItem('refreshToken', data.refreshToken);
        console.log('Login successful', data);
    } else {
        console.error('Login failed', data.error);
    }
};

app.post('/auth/logout', async (req, res) => {
    const { refreshToken } = req.body;

    if (!refreshToken) {
        return res.status(400).json({ error: 'Refresh token is required' });
    }

    try {
        // Remove the refresh token from the database
        await db.query(`UPDATE users SET refresh_token = NULL WHERE refresh_token = ?`, [refreshToken]);

        res.status(200).json({ message: 'Logged out successfully' });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'Internal server error' });
    }
});

app.post('/auth/refresh', async (req, res) => {
    const { refreshToken } = req.body;

    if (!refreshToken) {
        return res.status(400).json({ error: 'Refresh token is required' });
    }

    try {
        // Verify the refresh token
        const decoded = jwt.verify(refreshToken, REFRESH_SECRET_KEY);

        // Optional: Check if the refresh token exists in the database
        const query = `SELECT * FROM users WHERE id = ? AND refresh_token = ?`;
        const [users] = await db.query(query, [decoded.id, refreshToken]);

        if (users.length === 0) {
            return res.status(401).json({ error: 'Invalid refresh token' });
        }

        const user = users[0];

        // Generate a new access token
        const newAccessToken = jwt.sign(
            { id: user.id, email: user.email, username: user.username },
            ACCESS_SECRET_KEY,
            { expiresIn: '15m' }
        );

        res.status(200).json({
            accessToken: newAccessToken,
        });
    } catch (err) {
        console.error(err);
        return res.status(401).json({ error: 'Invalid or expired refresh token' });
    }
});

app.post('/auth/login', async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.status(400).json({ error: 'Missing required fields' });
    }

    try {
        // Fetch user from database
        const query = `SELECT * FROM users WHERE email = ?`;
        const [users] = await db.query(query, [email]);

        if (users.length === 0) {
            return res.status(401).json({ error: 'Invalid credentials' });
        }

        const user = users[0];

        // Verify password
        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
            return res.status(401).json({ error: 'Invalid credentials' });
        }

        // Generate tokens
        const accessToken = jwt.sign(
            { id: user.id, email: user.email, username: user.username },
            ACCESS_SECRET_KEY,
            { expiresIn: '15m' } // Access token expires in 15 minutes
        );

        const refreshToken = jwt.sign(
            { id: user.id, email: user.email },
            REFRESH_SECRET_KEY,
            { expiresIn: '7d' } // Refresh token expires in 7 days
        );

        // Save refresh token in database (optional, but recommended for security)
        await db.query(`UPDATE users SET refresh_token = ? WHERE id = ?`, [refreshToken, user.id]);

        res.status(200).json({
            message: 'Login successful',
            accessToken,
            refreshToken,
        });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'Internal server error' });
    }
});


const ACCESS_SECRET_KEY = 'your_access_secret_key';
const REFRESH_SECRET_KEY = 'your_refresh_secret_key';

const handleLogout = async () => {
    const refreshToken = localStorage.getItem('refreshToken');

    await fetch('http://localhost:3000/auth/logout', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ refreshToken }),
    });

    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
    console.log('Logged out');
};
